(in-package #:cl-cwd)

;;;;;;;;;; Thank you, krzysz00 and Clayton Stanley from [here](http://stackoverflow.com/questions/10049338/common-lisp-launch-subprocess-with-different-working-directory-than-lisp-proces)
(defmacro with-cwd (dir &body body)
  (with-gensyms (original-directory)
    `(let ((,original-directory (get-cwd)))
       (unwind-protect (progn
			 (cwd ,dir)
			 ,@body)
	 (cwd ,original-directory)))))

(defun get-cwd ()
  "Get the current directory pathname in an implementation-portable way"
  (let ((dir #+allegro (excl:current-directory)
	     #+clisp (#+lisp=cl ext:default-directory #-lisp=cl lisp:default-directory)
	     #+(or cmu scl) (ext:default-directory)
	     #+sbcl (sb-unix:posix-getcwd/)
	     #+CCL (ccl:current-directory)
	     #+cormanlisp (ccl:get-current-directory)
	     #+lispworks (hcl:get-working-directory)
	     #+mcl (ccl:mac-default-directory)
	     #-(or allegro clisp cmu scl cormanlisp mcl sbcl lispworks CCL) (truename ".")))
    (if (stringp dir)
	(parse-namestring dir)
	dir)))

(defun cwd (&optional dir)
  "Change directory and set default pathname in an implementation-portable way."
  (cond
    ((not (null dir))
     (when (and (typep dir 'logical-pathname)
		(translate-logical-pathname dir))
       (setq dir (translate-logical-pathname dir)))
     (when (stringp dir)
       (setq dir (parse-namestring dir)))
     #+allegro (excl:chdir dir)
     #+clisp (#+lisp=cl ext:cd #-lisp=cl lisp:cd dir)
     #+(or cmu scl) (setf (ext:default-directory) dir)
     #+cormanlisp (ccl:set-current-directory dir)
     #+(and mcl (not openmcl)) (ccl:set-mac-default-directory dir)
     #+openmcl (ccl:cwd dir)
     #+gcl (si:chdir dir)
     #+lispworks (hcl:change-directory dir)
     #+sbcl (sb-posix:chdir dir)
     (setq cl:*default-pathname-defaults* dir)
     (get-cwd))
    (t (get-cwd))))
